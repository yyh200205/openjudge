//输入包括N+1行：
//第一行是一个整数N，表示一共进行了N次游戏。1 <= N <= 100。
//接下来N行的每一行包括两个字符串，表示游戏参与者Player1，Player2的选择（石头、剪子或者是布）：
//S1 S2
//字符串之间以空格隔开S1, S2只可能取值在{ "Rock", "Scissors", "Paper" }（大小写敏感）中。
//Rock Scissors Paper
#include<stdio.h>
int main()
{
    int n,k;
    char a[101],a1,a2;
    scanf("%d",&n);
    k=1;
    while(k<=n)
    {
        scanf("%s",a);
        a1=a[0];
        scanf("%s",a);
        a2=a[0];
        if(a1==a2)
            printf("Tie\n");
        else
            if(a1=='R')
            {
                if(a2=='S')
                    printf("Player1\n");
                else
                    printf("Player2\n");
            }
            else if(a1=='S')
            {
                if(a2=='P')
                    printf("Player1\n");
                else
                    printf("Player2\n");
            }
            else if(a1=='P')
            {
                if(a2=='R')
                    printf("Player1\n");
                else
                    printf("Player2\n");
            }
        k++;
    }
    return 0;
}


#define _CRT_SECURE_NO_WARNINGS
////亲朋字符串s1定义如下：给定字符串s的第一个字符的ASCII值加第二个字符的ASCII值，得到第一个亲朋字符;
////给定字符串s的第二个字符的ASCII值加第三个字符的ASCII值，得到第二个亲朋字符；依此类推，直到给定字符串s的倒数第二个字符.
////亲朋字符串的最后一个字符由给定字符串s的最后一个字符ASCII值加s的第一个字符的ASCII值。
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main()
{
	char arr[255];
	char Arr[255];
	int len = 0;
	int  i = 0;
	gets_s(arr);//这里不能用scanf("%s",arr); 
	len = strlen(arr);//计算字符串长 

	for (i = 0; i < len; i++)
	{
		if (i < len - 1)
		{
			Arr[i] = arr[i] + arr[i + 1];
		}
		else //字符串到达了最后一个 
		{
			Arr[i] = arr[i] + arr[0];
		}
	}

	for (i = 0; i < len; i++)//输出 
	{
		printf("%c", Arr[i]);
	}
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//配对碱基链
int main()
{
	int i = 0;
	int len = 0;
	char arr[255];
	char arr2[255];
	gets_s(arr);
	len = strlen(arr);
	for (i = 0; i < len; i++)
	{
		if (arr[i] == 'A')
		{
			arr2[i] = 'T';
		}
		else if(arr[i] == 'T')
		{
			arr2[i] = 'A';
		}
		else if (arr[i] == 'G')
		{
			arr2[i] = 'C';
		}
		else
		{
			arr2[i] = 'G';
		}
	}
	for (i = 0; i < len; i++)
	{
		printf("%c", arr2[i]);
	}
	printf("\n");

	return 0;
}

//在字符串中替换特定的字符
#include<stdio.h>
int main()
{
	char ch_arr[80];
	char ch_1,ch_2;
	scanf("%s",ch_arr);
	getchar();
	scanf("%c", &ch_1);
	getchar();
	scanf("%c", &ch_2);
	char *p;
	p=ch_arr;
	while(*p!='\0')
	{
		if(*p==ch_1) *p=ch_2;
		p++;
	}
	printf("%s", ch_arr);
	return 0; 
} 

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//密码翻译
//把其中从a-y，A-Y的字母用其后继字母替代，
//把z和Z用a和A替代，
//其他非字母字符不变，则可得到一个简单的加密字符串。
int main()
{
	int i = 0;
	int len = 0;
	char arr[80];
	char arr2[80];
	gets_s(arr);
	len = strlen(arr);
	for (i = 0; i < len; i++)
	{
		if (arr[i] == 'z')
		{
			arr2[i] = 'a';
		}
		else if (arr[i] == 'Z')
		{
			arr2[i] = 'A';
		}
		else if ((arr[i] >= 'a' && arr[i] <= 'y') || (arr[i] >= 'A' && arr[i] <= 'Y'))
		{
			arr2[i] = arr[i] + 1;
		}
		else
		{
			arr2[i] = arr[i];
		}
	}
	for (i = 0; i < len; i++)
	{
		printf("%c", arr2[i]);
	}
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//简单密码
//对于明文中的每个字符，将它用它字母表中后5位对应的字符来代替，这样就得到了密文。
int main()
{
	int i = 0;
	int len = 0;
	char arr[200];
	char arr2[200];
	gets_s(arr);
	len = strlen(arr);
	for (i = 0; i < len; i++)
	{
		if (arr[i] >= 'A' && arr[i] <= 'E')
		{
			arr2[i] = arr[i] + 21;
		}
		else if (arr[i] >= 'F' && arr[i] <= 'Z')
		{
			arr2[i] = arr[i] - 5;
		}
		else
		{
			arr2[i] = arr[i];
		}
	}
	for (i = 0; i < len; i++)
	{
		printf("%c", arr2[i]);
	}
	return 0;
}
